#include<iostream>
#include<stdlib.h>

using namespace std;
#define MAXNUM 20 //最大允许的子程序数目
typedef struct EdgeNode //边
{
	int adjvex;//弧指向的顶点的位置
	int weight;//过程时间，用于aoe网
	EdgeNode* nextarc; //指向下一条弧的指针
};

typedef struct VertexNode //顶点
{
	int in = 0;//入度
	int time;//顶点信息,项目完成需要的时间
	EdgeNode* firstedge;
}VNode[MAXNUM];

typedef struct ALG
{
	VNode adjlist;
	int numarc, numvnd;//图当中的点数和边数
};

void CreateALG(ALG* G)//构造邻接表
{
	int i, j, k;
	//int b;
	EdgeNode* e;
	cout << "请输入子程序的数目和彼此制约关系的数目：" << endl;
	cin >> G->numarc >> G->numvnd;
	cout << "请输入按顺序输入（从0递增）子程序完成所需要的时间" << endl;
	for (i = 0; i < G->numarc; i++)
	{

		//cin >> b;
		cin >> G->adjlist[i].time;
		G->adjlist[i].firstedge = NULL;//将边表置为空表
		G->adjlist[i].in = 0;//入度置0
	}
	cout << "请输入子程序直接的制约关系:" << endl;
	for (k = 0; k < G->numvnd; k++)
	{
		cout << (k + 1) << ".请输入制约关系的前置程序：";
		cin >> i;
		cout << "请输入制约关系的后置程序：";
		cin >> j;
		cout << endl;
		e = (EdgeNode*)malloc(sizeof(EdgeNode));//申请内存空间
		e->adjvex = j;							//邻接序号未j
		e->weight = G->adjlist[i].time;    //给边时间权重
		e->nextarc = G->adjlist[i].firstedge;//将e指针指向当前顶点指向的结点
		G->adjlist[i].firstedge = e;			//将当前顶点的指针指向e
		G->adjlist[j].in++;     //后之程序进度加1
	}
}

int* etv, * ltv;//事件发生的最早时间和最迟发生时间
int* stack2;		//用于存储拓扑序列的栈
int top2;		//用于stack2的指针


int Topsort(ALG* GL) //拓扑排序，判断工程是否能够顺利完成,若能完成返回1，否则返回0
{
	EdgeNode* e;
	int i, k, gettop;
	int top = 0;  //用于栈指针下标
	int count = 0; //用于统计输出顶点的个数
	int* stack;   //建立存储入度为0的顶点
	stack = (int*)malloc(GL->numarc * sizeof(int));
	for (i = 0; i < GL->numarc; i++)
		if (GL->adjlist[i].in == 0)
			stack[++top] = i;
	top2 = 0; //初始化
	etv = (int*)malloc(GL->numarc * sizeof(int));//初始化
	for (i = 0; i < GL->numarc; i++)//初始化
		etv[i] = 0;
	stack2 = (int*)malloc(GL->numarc * sizeof(int));//初始化

	while (top != 0)
	{
		gettop = stack[top--];
		count++;
		stack2[++top2] = gettop; //将弹出的顶点序号压入拓扑序列的栈
		for (e = GL->adjlist[gettop].firstedge; e; e = e->nextarc)
		{
			k = e->adjvex;
			if (!(--GL->adjlist[k].in))  //顶k入度减一，若为0则入栈
				stack[++top] = k;
			if ((etv[gettop] + e->weight) > etv[k])  //求各顶点事件最早发生的时间值
				etv[k] = etv[gettop] + e->weight;
		}
	}
	if (count < GL->numarc) //若count小于顶点数，说明存在环
		return 0;
	else return 1;
}

void CriticalPath(ALG* GL)  //寻找关键路径
{
	EdgeNode* e;
	int i, gettop, k, j, temp = 999;
	int ete, lte;				//声明活动的最早发生时间和最迟发生时间变量
	int sum = 0;					//用于记录项目完成所需的时间
	int max = 0;					//用于记录当关键路径中结尾存在分叉的情况
	ltv = (int*)malloc(GL->numarc * sizeof(int)); //事件最晚发生时间
	for (i = 0; i < GL->numarc; i++)
	{
		ltv[i] = etv[GL->numarc - 1]; //初始化tlv
	}
	while (top2 != 0)
	{
		gettop = stack2[top2--];
		for (e = GL->adjlist[gettop].firstedge; e; e = e->nextarc)
		{
			//求个顶点事件的最迟发生时间ltv值
			k = e->adjvex;
			if (ltv[k] - e->weight < ltv[gettop])
			{
				ltv[gettop] = ltv[k] - e->weight;
			}
		}
	}
	for (j = 0; j < GL->numarc; j++)
	{
		for (e = GL->adjlist[j].firstedge; e; e = e->nextarc)
		{
			k = e->adjvex;
			ete = etv[j];		//活动最早发生时间
			lte = ltv[k] - e->weight;  //活动最迟发生时间
			if (ete == lte)				//两者相等及在关键路径上
			{
				cout << "<" << j << "," << k << ">:" << e->weight << endl;
				if (temp != j)
				{
					sum += e->weight;
					temp = j;
					max = GL->adjlist[k].time;
				}
				else if (max < GL->adjlist[k].time)
					max = GL->adjlist[k].time;
			}

		}
	}
	sum += max;
	cout << "该工程项目的执行所需的时间为：" << sum << endl;
	cout << "若想有效的缩短工程，可改善上述关键路径中子程序的执行时间";

}

int main()
{
	ALG* progream;
	progream = (ALG*)malloc(sizeof(ALG));
	CreateALG(progream);
	if (Topsort(progream))
		cout << "该工程项目能够顺利完成" << endl;
	else
	{
		cout << "该工程项目不能够顺利完成" << endl;
		return 0;
	}
	cout << "工程的关键路径如下：" << endl;
	CriticalPath(progream);
	return 0;
}
